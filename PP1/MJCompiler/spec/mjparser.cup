package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/* Nazivi terminala se poklapaju sa nazivima iz mjlexer.flex */

/* *************** TERMINAL SYMBOLS (TERMINALNI SIMBOLI) *************** */

terminal PROGRAM;
terminal BREAK;
terminal CLASS;
terminal ELSE;
terminal IF;
terminal NEW;
terminal PRINT;
terminal READ;
terminal RETURN;
terminal VOID;
terminal EXTENDS;
terminal CONTINUE;
terminal SET;
terminal UNION;
terminal DO;
terminal WHILE;
terminal MAP;
terminal INTERFACE;
terminal CONST;

terminal PLUS;
terminal MINUS;
terminal MULT;
terminal DIV;
terminal MOD;

terminal EQUALS;
terminal NOTEQUAL;
terminal GREATER;
terminal GREATEREQ;
terminal LESS;
terminal LESSEQ;

terminal AND;
terminal OR;

terminal ASSIGN;
terminal INC;
terminal DEC;

terminal SEMI;
terminal COLON;
terminal COMMA;
terminal DOT;

terminal LPAREN;
terminal RPAREN;
terminal LBRACKET;
terminal RBRACKET;
terminal LBRACE;
terminal RBRACE;

terminal Integer NUMBER;
terminal Boolean BOOL;
terminal Character CHAR;
terminal String IDENT;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Program;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Declaration;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Literal;

nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodSignature2;

nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodArgument;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Expr2;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Term;

nonterminal rs.etf.pp1.symboltable.concepts.Obj CondFact; // ?

nonterminal rs.etf.pp1.symboltable.concepts.Obj Factor;

nonterminal DeclarationsOptional;
nonterminal DeclarationsList;
nonterminal ConstDeclList;
nonterminal Const;
nonterminal VarDecl;
nonterminal VarDeclList;
nonterminal VarDeclOptional;
nonterminal VarDeclMultiple;
nonterminal MethodName;
nonterminal MethodDeclarationList;
nonterminal MethodDeclaration;
nonterminal MethodReturnType;
nonterminal MethodSignature;
nonterminal MethodSignatureEnd;
nonterminal MethodParametersOptional;
nonterminal MethodParametersList;
nonterminal MethodParameter;
nonterminal StatementList;
nonterminal Statement;
nonterminal Matched;
nonterminal Unmatched;
nonterminal Else;
nonterminal DoStatement;
nonterminal WhileStatement;
nonterminal DesignatorStatement;
nonterminal DesignatorsOptional;
nonterminal DesignatorList;
nonterminal Selector;
nonterminal PrintStatement;
nonterminal ReturnStatement;
nonterminal Condition;
nonterminal CondTermList;
nonterminal CondTerm;
nonterminal CondFactList;
nonterminal AddopGroup;
nonterminal Relop;
nonterminal Mulop;
nonterminal Addop;
nonterminal MethodArgumentsOptional;
nonterminal MethodArgumentList;
nonterminal LocalVars, LocalVar;
nonterminal Type;
nonterminal Set;
nonterminal Name;
nonterminal NegOp;
nonterminal LBracket;

precedence left ELSE;


Program               ::= (Program) PROGRAM ProgramName DeclarationsList LBRACE MethodDeclarationList RBRACE;

ProgramName           ::= (ProgramName) IDENT:ident;

DeclarationsList      ::= (NonEmptyDeclList) DeclarationsList Declaration 
                       |  (EmptyDeclList) /*epsilon*/;

Declaration           ::= (ConstDecl) CONST Type ConstDeclList SEMI
                       |  (GlobalVarDecl) Type VarDeclList SEMI
                       |  (GlobalSetDecl) Set VarDeclList SEMI;

ConstDeclList         ::= (SingleConstDecl) Const
                       |  (MultipleConstDecl) ConstDeclList COMMA Const;

Const                 ::= (Const) Name ASSIGN Literal;

Name                  ::= (Name) IDENT:ident;

Type                  ::= (Type) IDENT:typeName;

Set                   ::= (Set) SET;

VarDeclList           ::= (SingleVarDecl) Name
                       |  (SingleVarDeclVector) Name LBRACKET RBRACKET
                       |  (MultipleVarDecl) VarDeclList COMMA Name
                       |  (MultipleVarDeclVector) VarDeclList COMMA Name LBRACKET RBRACKET;

Literal               ::= (IntLiteral) NUMBER:value
                       |  (BoolLiteral) BOOL:value
                       |  (CharLiteral) CHAR:value;

MethodDeclarationList ::= (MethodDeclarations) MethodDeclarationList MethodDeclaration
                       |  (NoMethodDeclarations) /*epsilon*/;

MethodDeclaration     ::= (MethodDeclaration) MethodSignature LocalVars LBRACE StatementList RBRACE;

LocalVars             ::= LocalVars LocalVar 
                       |  /*epsilon*/;

LocalVar              ::= Type VarDeclList SEMI;

StatementList         ::= (NonEmptyStatementList) StatementList Statement 
                       |  (EmptyStatementList) /*epsilon*/;

Statement             ::= (MatchedStatement) Matched 
                       |  (UnmatchedStatement) Unmatched;

Unmatched             ::= (UnmatchedIf) IF LPAREN Condition RPAREN Statement 
                       |  (UnmatchedIfElse) IF LPAREN Condition RPAREN Matched Else Unmatched;

Matched               ::= (DesignatorStatementMatched) DesignatorStatement SEMI
                       |  (Print) PRINT LPAREN Expr2 RPAREN SEMI
                       |  (PrintWithComma) PRINT LPAREN Expr2 COMMA NUMBER RPAREN SEMI
                       |  (ReturnWithExpr) RETURN Expr2 SEMI
                       |  (Return) RETURN SEMI
                       |  (Read) READ LPAREN Designator RPAREN SEMI
                       |  (Continue) CONTINUE SEMI
                       |  (Break) BREAK SEMI
                       |  (MatchedIf) IF LPAREN Condition RPAREN Matched Else Matched
                       |  (DoWhile) DoStatement Statement WhileStatement LPAREN RPAREN SEMI
                       |  (DoWhileWithCond) DoStatement Statement WhileStatement LPAREN Condition RPAREN SEMI
                       |  (DoWhileWithCondNStmt) DoStatement Statement WhileStatement LPAREN Condition COMMA DesignatorStatement RPAREN SEMI
                       |  (StatementListMatched) LBRACE StatementList RBRACE;

Else                  ::= (Else) ELSE;

DoStatement           ::= (DoStatement) DO;            

WhileStatement        ::= (WhileStatement) WHILE;

DesignatorStatement   ::= (DesignatorAssign) Designator ASSIGN Expr2
                       |  (FunctionCall) Designator LPAREN MethodArgumentsOptional RPAREN
                       |  (DesignatorInc) Designator INC
                       |  (DesignatorDec) Designator DEC
                       |  (DesignatorUnion) Designator ASSIGN Designator UNION Designator;

Designator            ::= (DesignatorIdent) IDENT:ident
                       |  (DesignatorSelect) Designator Selector;

Selector              ::= (Selector) LBracket Expr2 RBRACKET;

Condition             ::= (Condition) CondTermList;

CondTermList          ::= (MultipleCondTerms) CondTermList OR CondTerm
                       |  (SingleCondTerm) CondTerm;

CondTerm              ::= (CondTerm) CondFactList;

CondFactList          ::= (MultipleCondFacts) CondFactList AND CondFact 
                       |  (SingleCondFact) CondFact;

CondFact              ::= (ExprCondFactor) Expr2 
                       |  (RelopCondFactor) Expr2 Relop Expr2;

Expr2                 ::= (NegativeTermExprSum) NegOp Term AddopGroup 
                       |  (TermExprSum) Term AddopGroup 
                       |  (TermExpr) Term
                       |  (NegativeTermExpr) NegOp Term
                       |  (DesignatorMapExpr) Designator MAP Designator;
                       
NegOp                 ::= (NegativeOperator) MINUS;

AddopGroup            ::= (AddopGroupTerm) AddopGroup Addop Term 
                       |  (AddopTerm) Addop Term;

Relop                 ::= (EqRelop) EQUALS
                       |  (NeqRelop) NOTEQUAL
                       |  (GtRelop) GREATER
                       |  (GteqRelop) GREATEREQ 
                       |  (LsRelop) LESS 
                       |  (LseqRelop) LESSEQ;

Term                  ::= (FactorTerm) Factor
                       |  (MulopTerm) Term Mulop Factor;

Factor                ::= (DesignatorFactor) Designator
                       |  (VectorFactor) Designator LBRACKET RBRACKET
                       |  (MethodCallFactor) Designator LPAREN MethodArgumentsOptional RPAREN
                       |  (NumberFactor) NUMBER:value
                       |  (CharFactor) CHAR:value
                       |  (BoolFactor) BOOL:value
                       |  (NewVectorFactor) NEW Type LBRACKET Expr2 RBRACKET
                       |  (NewSetFactor) NEW SET LBRACKET Expr2 RBRACKET
                       |  (TypeConstructorFactor) NEW Type LPAREN MethodArgumentList RPAREN
                       |  (DelimitedFactor) LPAREN Expr2 RPAREN;

Mulop                 ::= (MultOp) MULT 
                       |  (DivOp) DIV 
                       |  (ModOp) MOD;

Addop                 ::= (Minus) MINUS 
                       |  (Plus) PLUS;

MethodSignature       ::= (MethodSignature) MethodSignature2 LPAREN MethodParametersOptional MethodSignatureEnd;

MethodSignatureEnd    ::= (MethodSignatureEnd) RPAREN;

MethodSignature2      ::= (MethodSignature2) MethodReturnType Name;

MethodReturnType      ::= (VoidReturnType) VOID 
                       |  (NonVoidReturnType) Type:ident;

MethodParametersOptional ::= (NonEmptyMethodParameters) MethodParametersList 
                           | (EmptyMethodParameters) /*epsilon*/;

MethodParametersList  ::= (MultipleMethodParameters) MethodParametersList COMMA MethodParameter 
                       |  (SingleMethodParameter) MethodParameter;

MethodParameter       ::= (ScalarMethodParameter) Type IDENT:ident 
                       |  (VectorMethodParameter) Type IDENT:ident LBRACKET RBRACKET;

MethodArgumentsOptional ::= (NonEmptyMethodArguments) MethodArgumentList 
                          | (EmptyMethodArguments) /*epsilon*/;

MethodArgumentList    ::= (MultipleMethodArguments) MethodArgumentList COMMA MethodArgument 
                       |  (SingleMethodArgument) MethodArgument;

MethodArgument        ::= (IdentMethodArgument) IDENT:ident
                       |  (IdentVectorMethodArgument) IDENT:ident LBracket Expr2 RBRACKET
                       |  (LiteralMethodArgument) Literal;
                       
LBracket              ::= (LBracket) LBRACKET;




