package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

/* Nazivi terminala se poklapaju sa nazivima iz mjlexer.flex */

/* *************** TERMINAL SYMBOLS (TERMINALNI SIMBOLI) *************** */

terminal PROGRAM;
terminal BREAK;
terminal CLASS;
terminal ELSE;
terminal IF;
terminal NEW;
terminal PRINT;
terminal READ;
terminal RETURN;
terminal VOID;
terminal EXTENDS;
terminal CONTINUE;
terminal SET;
terminal UNION;
terminal DO;
terminal WHILE;
terminal MAP;
terminal INTERFACE;
terminal CONST;

terminal PLUS;
terminal MINUS;
terminal MULT;
terminal DIV;
terminal MOD;

terminal EQUALS;
terminal NOTEQUAL;
terminal GREATER;
terminal GREATEREQ;
terminal LESS;
terminal LESSEQ;

terminal AND;
terminal OR;

terminal ASSIGN;
terminal INC;
terminal DEC;

terminal SEMI;
terminal COLON;
terminal COMMA;
terminal DOT;

terminal LPAREN;
terminal RPAREN;
terminal LBRACKET;
terminal RBRACKET;
terminal LBRACE;
terminal RBRACE;

terminal Integer NUMBER;
terminal Boolean BOOL;
terminal Character CHAR;
terminal String IDENT;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Program;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Declaration;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Literal;

nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodSignature2;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Expr2;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Term;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Factor;

nonterminal DeclarationsOptional;
nonterminal DeclarationsList;
nonterminal ConstDeclList;
nonterminal Const;
nonterminal VarDecl;
nonterminal VarDeclList;
nonterminal VarDeclOptional;
nonterminal VarDeclMultiple;
nonterminal MethodName;
nonterminal MethodDeclarationList;
nonterminal MethodDeclaration;
nonterminal MethodReturnType;
nonterminal MethodSignature;
nonterminal MethodParametersOptional;
nonterminal MethodParametersList;
nonterminal MethodParameter;
nonterminal StatementList;
nonterminal Statement;
nonterminal Matched;
nonterminal Unmatched;
nonterminal DesignatorStatement;
nonterminal Designator;
nonterminal DesignatorsOptional;
nonterminal DesignatorList;
nonterminal Selector;
nonterminal PrintStatement;
nonterminal ReturnStatement;
nonterminal Condition;
nonterminal CondTermList;
nonterminal CondTerm;
nonterminal CondFactList;
nonterminal CondFact;
nonterminal AddopGroup;
nonterminal Relop;
nonterminal Mulop;
nonterminal Addop;
nonterminal MethodArgumentsOptional;
nonterminal MethodArgumentList;
nonterminal MethodArgument;
nonterminal LocalVars, LocalVar;
nonterminal Type;
nonterminal Name;


Program               ::= (Program) PROGRAM ProgramName DeclarationsList LBRACE MethodDeclarationList RBRACE;

ProgramName           ::= (ProgramName) IDENT:ident;

DeclarationsList      ::= (NonEmptyDeclList) DeclarationsList Declaration 
                       |  (EmptyDeclList) /*epsilon*/;

Declaration           ::= (ConstDecl) CONST Type ConstDeclList SEMI
                       |  (GlobalVarDecl) Type VarDeclList SEMI;

ConstDeclList         ::= (SingleConstDecl) Const
                       |  (MultipleConstDecl) ConstDeclList COMMA Const;

Const                 ::= (Const) Name ASSIGN Literal;

Name                  ::= (Name) IDENT:ident;

Type                  ::= (Type) IDENT:typeName;

VarDeclList           ::= (SingleVarDecl) Name
                       |  (SingleVarDeclVector) Name LBRACKET RBRACKET
                       |  (MultipleVarDecl) VarDeclList COMMA Name
                       |  (MultipleVarDeclVector) VarDeclList COMMA Name LBRACKET RBRACKET;

Literal               ::= (IntLiteral) NUMBER:value
                       |  (BoolLiteral) BOOL:value
                       |  (CharLiteral) CHAR:value;

MethodDeclarationList ::= (MethodDeclarations) MethodDeclarationList MethodDeclaration
                       |  (NoMethodDeclarations) /*epsilon*/;

MethodDeclaration     ::= (MethodDeclaration) MethodSignature LocalVars LBRACE StatementList RBRACE;

LocalVars             ::= LocalVars LocalVar 
                       |  /*epsilon*/;

LocalVar              ::= Type VarDeclList SEMI;

StatementList         ::= StatementList Statement 
                       |  /*epsilon*/;

Statement             ::= Matched 
                       |  Unmatched;

Unmatched             ::= IF LPAREN Condition RPAREN Statement 
                       |  IF LPAREN Condition RPAREN Matched ELSE Unmatched;

Matched               ::= (DesignatorStatementMatched) DesignatorStatement SEMI
                       |  (Print) PRINT LPAREN Expr2 RPAREN SEMI
                       |  (PrintWithComma) PRINT LPAREN Expr2 COMMA NUMBER RPAREN SEMI
                       |  (ReturnWithExpr) RETURN Expr2 SEMI
                       |  (Return) RETURN SEMI
                       |  (Read) READ LPAREN Designator RPAREN SEMI
                       |  (Continue) CONTINUE SEMI
                       |  (Break) BREAK SEMI
                       |  (If) IF LPAREN Condition RPAREN Matched ELSE Matched
                       |  (DoWhile) DO Statement WHILE LPAREN RPAREN SEMI
                       |  (DoWhileWithCond) DO Statement WHILE LPAREN Condition RPAREN SEMI
                       |  (DoWhileWithCondNStmt) DO Statement WHILE LPAREN Condition COMMA DesignatorStatement RPAREN SEMI
                       |  (StatementListMatched) LBRACE StatementList RBRACE;

DesignatorStatement   ::= (DesignatorAssign) Designator ASSIGN Expr2
                       |  (FunctionCall) Designator LPAREN MethodArgumentsOptional RPAREN
                       |  (DesignatorInc) Designator INC
                       |  (DesignatorDec) Designator DEC
                       |  (DesignatorUnion) Designator ASSIGN Designator UNION Designator;

Designator            ::= (DesignatorIdent) IDENT 
                       |  (DesignatorSelect) Designator Selector;

Selector              ::= (DesignatorAttribute) DOT IDENT 
                       |  (DesignatorVector) LBRACKET Expr2 RBRACKET;

Condition             ::= CondTerm CondTermList;

CondTermList          ::= CondTermList OR CondTerm
                       |  /*epsilon*/;

CondTerm              ::= CondFactList;

CondFactList          ::= CondFactList AND CondFact 
                       |  CondFact;

CondFact              ::= Expr2 
                       |  Expr2 Relop Expr2;

Expr2                 ::= (NegativeTermExprSum) MINUS Term AddopGroup 
                       |  (TermExprSum) Term AddopGroup 
                       |  (TermExpr) Term 
                       |  (NegativeTermExpr) MINUS Term;

AddopGroup            ::= AddopGroup Addop Term 
                       |  Addop Term;

Relop                 ::= EQUALS 
                       |  NOTEQUAL 
                       |  GREATER 
                       |  GREATEREQ 
                       |  LESS 
                       |  LESSEQ;

Term                  ::= (FactorTerm) Factor 
                       |  (MulopTerm) Term Mulop Factor;

Factor                ::= (DesignatorFactor) Designator 
                       |  (VectorFactor) Designator LBRACKET RBRACKET
                       |  (MethodCallFactor) Designator LPAREN MethodArgumentsOptional RPAREN
                       |  (NumberFactor) NUMBER:value
                       |  (CharFactor) CHAR:value
                       |  (BoolFactor) BOOL:value
                       |  (NewVectorFactor) NEW Type LBRACKET Expr2 RBRACKET
                       |  (TypeConstructorFactor) NEW Type LPAREN MethodArgumentList RPAREN
                       |  (DelimitedFactor) LPAREN Expr2 RPAREN;

Mulop                 ::= MULT 
                       |  DIV 
                       |  MOD;

Addop                 ::= MINUS 
                       |  PLUS;

MethodSignature       ::= (MethodSignature) MethodSignature2 LPAREN MethodParametersOptional RPAREN;

MethodSignature2      ::= (MethodSignature2) MethodReturnType Name;

MethodReturnType      ::= (VoidReturnType) VOID 
                       |  (NonVoidReturnType) Type:ident;

MethodParametersOptional ::= MethodParametersList 
                           |  /*epsilon*/;

MethodParametersList  ::= MethodParametersList COMMA MethodParameter 
                       |  MethodParameter;

MethodParameter       ::= Type IDENT 
                       |  Type IDENT LBRACKET RBRACKET;

MethodArgumentsOptional ::= MethodArgumentList 
                          |  /*epsilon*/;

MethodArgumentList    ::= MethodArgumentList COMMA MethodArgument 
                       |  MethodArgument;

MethodArgument        ::= IDENT 
                       |  IDENT LBRACKET RBRACKET 
                       |  Literal;




