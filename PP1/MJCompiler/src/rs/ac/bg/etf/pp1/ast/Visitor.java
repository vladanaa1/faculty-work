// generated with ast extension for cup
// version 0.8
// 11/0/2025 22:55:58


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(Unmatched Unmatched);
    public void visit(Mulop Mulop);
    public void visit(MethodParametersOptional MethodParametersOptional);
    public void visit(Literal Literal);
    public void visit(Matched Matched);
    public void visit(Relop Relop);
    public void visit(MethodParametersList MethodParametersList);
    public void visit(CondTermList CondTermList);
    public void visit(AddopGroup AddopGroup);
    public void visit(VarDeclOptional VarDeclOptional);
    public void visit(NegOp NegOp);
    public void visit(StatementList StatementList);
    public void visit(MethodDeclarationList MethodDeclarationList);
    public void visit(LocalVar LocalVar);
    public void visit(Addop Addop);
    public void visit(Factor Factor);
    public void visit(CondFactList CondFactList);
    public void visit(MethodParameter MethodParameter);
    public void visit(Designator Designator);
    public void visit(MethodName MethodName);
    public void visit(Term Term);
    public void visit(Condition Condition);
    public void visit(LocalVars LocalVars);
    public void visit(ConstDeclList ConstDeclList);
    public void visit(DesignatorsOptional DesignatorsOptional);
    public void visit(MethodArgumentList MethodArgumentList);
    public void visit(Selector Selector);
    public void visit(ReturnStatement ReturnStatement);
    public void visit(VarDeclList VarDeclList);
    public void visit(Expr2 Expr2);
    public void visit(VarDeclMultiple VarDeclMultiple);
    public void visit(DesignatorList DesignatorList);
    public void visit(DeclarationsOptional DeclarationsOptional);
    public void visit(DeclarationsList DeclarationsList);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(MethodReturnType MethodReturnType);
    public void visit(PrintStatement PrintStatement);
    public void visit(Statement Statement);
    public void visit(VarDecl VarDecl);
    public void visit(CondFact CondFact);
    public void visit(Declaration Declaration);
    public void visit(MethodArgument MethodArgument);
    public void visit(MethodArgumentsOptional MethodArgumentsOptional);
    public void visit(LiteralMethodArgument LiteralMethodArgument);
    public void visit(IdentVectorMethodArgument IdentVectorMethodArgument);
    public void visit(IdentMethodArgument IdentMethodArgument);
    public void visit(SingleMethodArgument SingleMethodArgument);
    public void visit(MultipleMethodArguments MultipleMethodArguments);
    public void visit(EmptyMethodArguments EmptyMethodArguments);
    public void visit(NonEmptyMethodArguments NonEmptyMethodArguments);
    public void visit(VectorMethodParameter VectorMethodParameter);
    public void visit(ScalarMethodParameter ScalarMethodParameter);
    public void visit(SingleMethodParameter SingleMethodParameter);
    public void visit(MultipleMethodParameters MultipleMethodParameters);
    public void visit(EmptyMethodParameters EmptyMethodParameters);
    public void visit(NonEmptyMethodParameters NonEmptyMethodParameters);
    public void visit(NonVoidReturnType NonVoidReturnType);
    public void visit(VoidReturnType VoidReturnType);
    public void visit(MethodSignature2 MethodSignature2);
    public void visit(MethodSignatureEnd MethodSignatureEnd);
    public void visit(MethodSignature MethodSignature);
    public void visit(Plus Plus);
    public void visit(Minus Minus);
    public void visit(ModOp ModOp);
    public void visit(DivOp DivOp);
    public void visit(MultOp MultOp);
    public void visit(DelimitedFactor DelimitedFactor);
    public void visit(TypeConstructorFactor TypeConstructorFactor);
    public void visit(NewVectorFactor NewVectorFactor);
    public void visit(BoolFactor BoolFactor);
    public void visit(CharFactor CharFactor);
    public void visit(NumberFactor NumberFactor);
    public void visit(MethodCallFactor MethodCallFactor);
    public void visit(VectorFactor VectorFactor);
    public void visit(DesignatorFactor DesignatorFactor);
    public void visit(MulopTerm MulopTerm);
    public void visit(FactorTerm FactorTerm);
    public void visit(LseqRelop LseqRelop);
    public void visit(LsRelop LsRelop);
    public void visit(GteqRelop GteqRelop);
    public void visit(GtRelop GtRelop);
    public void visit(NeqRelop NeqRelop);
    public void visit(EqRelop EqRelop);
    public void visit(AddopTerm AddopTerm);
    public void visit(AddopGroupTerm AddopGroupTerm);
    public void visit(NegativeOperator NegativeOperator);
    public void visit(NegativeTermExpr NegativeTermExpr);
    public void visit(TermExpr TermExpr);
    public void visit(TermExprSum TermExprSum);
    public void visit(NegativeTermExprSum NegativeTermExprSum);
    public void visit(RelopCondFactor RelopCondFactor);
    public void visit(ExprCondFactor ExprCondFactor);
    public void visit(CondFactListDerived2 CondFactListDerived2);
    public void visit(CondFactListDerived1 CondFactListDerived1);
    public void visit(CondTerm CondTerm);
    public void visit(CondTermListDerived2 CondTermListDerived2);
    public void visit(CondTermListDerived1 CondTermListDerived1);
    public void visit(ConditionDerived1 ConditionDerived1);
    public void visit(DesignatorVector DesignatorVector);
    public void visit(DesignatorAttribute DesignatorAttribute);
    public void visit(DesignatorSelect DesignatorSelect);
    public void visit(DesignatorIdent DesignatorIdent);
    public void visit(DesignatorUnion DesignatorUnion);
    public void visit(DesignatorDec DesignatorDec);
    public void visit(DesignatorInc DesignatorInc);
    public void visit(FunctionCall FunctionCall);
    public void visit(DesignatorAssign DesignatorAssign);
    public void visit(WhileStatement WhileStatement);
    public void visit(DoStatement DoStatement);
    public void visit(StatementListMatched StatementListMatched);
    public void visit(DoWhileWithCondNStmt DoWhileWithCondNStmt);
    public void visit(DoWhileWithCond DoWhileWithCond);
    public void visit(DoWhile DoWhile);
    public void visit(MatchedIf MatchedIf);
    public void visit(Break Break);
    public void visit(Continue Continue);
    public void visit(Read Read);
    public void visit(Return Return);
    public void visit(ReturnWithExpr ReturnWithExpr);
    public void visit(PrintWithComma PrintWithComma);
    public void visit(Print Print);
    public void visit(DesignatorStatementMatched DesignatorStatementMatched);
    public void visit(UnmatchedIfElse UnmatchedIfElse);
    public void visit(UnmatchedIf UnmatchedIf);
    public void visit(UnmatchedStatement UnmatchedStatement);
    public void visit(MatchedStatement MatchedStatement);
    public void visit(EmptyStatementList EmptyStatementList);
    public void visit(NonEmptyStatementList NonEmptyStatementList);
    public void visit(LocalVarDerived1 LocalVarDerived1);
    public void visit(LocalVarsDerived2 LocalVarsDerived2);
    public void visit(LocalVarsDerived1 LocalVarsDerived1);
    public void visit(MethodDeclaration MethodDeclaration);
    public void visit(NoMethodDeclarations NoMethodDeclarations);
    public void visit(MethodDeclarations MethodDeclarations);
    public void visit(CharLiteral CharLiteral);
    public void visit(BoolLiteral BoolLiteral);
    public void visit(IntLiteral IntLiteral);
    public void visit(MultipleVarDeclVector MultipleVarDeclVector);
    public void visit(MultipleVarDecl MultipleVarDecl);
    public void visit(SingleVarDeclVector SingleVarDeclVector);
    public void visit(SingleVarDecl SingleVarDecl);
    public void visit(Type Type);
    public void visit(Name Name);
    public void visit(Const Const);
    public void visit(MultipleConstDecl MultipleConstDecl);
    public void visit(SingleConstDecl SingleConstDecl);
    public void visit(GlobalVarDecl GlobalVarDecl);
    public void visit(ConstDecl ConstDecl);
    public void visit(EmptyDeclList EmptyDeclList);
    public void visit(NonEmptyDeclList NonEmptyDeclList);
    public void visit(ProgramName ProgramName);
    public void visit(Program Program);

}
