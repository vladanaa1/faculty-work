// generated with ast extension for cup
// version 0.8
// 22/11/2024 23:42:19


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(Unmatched Unmatched);
    public void visit(Mulop Mulop);
    public void visit(MethodParametersOptional MethodParametersOptional);
    public void visit(Literal Literal);
    public void visit(Matched Matched);
    public void visit(Relop Relop);
    public void visit(MethodParametersList MethodParametersList);
    public void visit(CondTermList CondTermList);
    public void visit(AddopGroup AddopGroup);
    public void visit(VarDeclOptional VarDeclOptional);
    public void visit(StatementList StatementList);
    public void visit(MethodDeclarationList MethodDeclarationList);
    public void visit(LocalVar LocalVar);
    public void visit(Addop Addop);
    public void visit(Factor Factor);
    public void visit(CondTerm CondTerm);
    public void visit(CondFactList CondFactList);
    public void visit(MethodParameter MethodParameter);
    public void visit(Designator Designator);
    public void visit(MethodName MethodName);
    public void visit(Term Term);
    public void visit(Condition Condition);
    public void visit(LocalVars LocalVars);
    public void visit(ConstDeclList ConstDeclList);
    public void visit(DesignatorsOptional DesignatorsOptional);
    public void visit(MethodArgumentList MethodArgumentList);
    public void visit(Selector Selector);
    public void visit(ReturnStatement ReturnStatement);
    public void visit(VarDeclList VarDeclList);
    public void visit(Expr2 Expr2);
    public void visit(VarDeclMultiple VarDeclMultiple);
    public void visit(DesignatorList DesignatorList);
    public void visit(DeclarationsOptional DeclarationsOptional);
    public void visit(DeclarationsList DeclarationsList);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(MethodReturnType MethodReturnType);
    public void visit(PrintStatement PrintStatement);
    public void visit(Statement Statement);
    public void visit(VarDecl VarDecl);
    public void visit(CondFact CondFact);
    public void visit(Declaration Declaration);
    public void visit(MethodArgument MethodArgument);
    public void visit(MethodArgumentsOptional MethodArgumentsOptional);
    public void visit(MethodArgumentDerived3 MethodArgumentDerived3);
    public void visit(MethodArgumentDerived2 MethodArgumentDerived2);
    public void visit(MethodArgumentDerived1 MethodArgumentDerived1);
    public void visit(MethodArgumentListDerived2 MethodArgumentListDerived2);
    public void visit(MethodArgumentListDerived1 MethodArgumentListDerived1);
    public void visit(MethodArgumentsOptionalDerived2 MethodArgumentsOptionalDerived2);
    public void visit(MethodArgumentsOptionalDerived1 MethodArgumentsOptionalDerived1);
    public void visit(VectorMethodParameter VectorMethodParameter);
    public void visit(ScalarMethodParameter ScalarMethodParameter);
    public void visit(MethodParametersListDerived2 MethodParametersListDerived2);
    public void visit(MethodParametersListDerived1 MethodParametersListDerived1);
    public void visit(MethodParametersOptionalDerived2 MethodParametersOptionalDerived2);
    public void visit(MethodParametersOptionalDerived1 MethodParametersOptionalDerived1);
    public void visit(NonVoidReturnType NonVoidReturnType);
    public void visit(VoidReturnType VoidReturnType);
    public void visit(MethodSignature2 MethodSignature2);
    public void visit(MethodSignature MethodSignature);
    public void visit(AddopDerived2 AddopDerived2);
    public void visit(AddopDerived1 AddopDerived1);
    public void visit(MulopDerived3 MulopDerived3);
    public void visit(MulopDerived2 MulopDerived2);
    public void visit(MulopDerived1 MulopDerived1);
    public void visit(DelimitedFactor DelimitedFactor);
    public void visit(TypeConstructorFactor TypeConstructorFactor);
    public void visit(NewVectorFactor NewVectorFactor);
    public void visit(BoolFactor BoolFactor);
    public void visit(CharFactor CharFactor);
    public void visit(NumberFactor NumberFactor);
    public void visit(MethodCallFactor MethodCallFactor);
    public void visit(VectorFactor VectorFactor);
    public void visit(DesignatorFactor DesignatorFactor);
    public void visit(MulopTerm MulopTerm);
    public void visit(FactorTerm FactorTerm);
    public void visit(RelopDerived6 RelopDerived6);
    public void visit(RelopDerived5 RelopDerived5);
    public void visit(RelopDerived4 RelopDerived4);
    public void visit(RelopDerived3 RelopDerived3);
    public void visit(RelopDerived2 RelopDerived2);
    public void visit(RelopDerived1 RelopDerived1);
    public void visit(AddopGroupDerived2 AddopGroupDerived2);
    public void visit(AddopGroupDerived1 AddopGroupDerived1);
    public void visit(NegativeTermExpr NegativeTermExpr);
    public void visit(TermExpr TermExpr);
    public void visit(TermExprSum TermExprSum);
    public void visit(NegativeTermExprSum NegativeTermExprSum);
    public void visit(CondFactDerived2 CondFactDerived2);
    public void visit(CondFactDerived1 CondFactDerived1);
    public void visit(CondFactListDerived2 CondFactListDerived2);
    public void visit(CondFactListDerived1 CondFactListDerived1);
    public void visit(CondTermDerived1 CondTermDerived1);
    public void visit(CondTermListDerived2 CondTermListDerived2);
    public void visit(CondTermListDerived1 CondTermListDerived1);
    public void visit(ConditionDerived1 ConditionDerived1);
    public void visit(DesignatorVector DesignatorVector);
    public void visit(DesignatorAttribute DesignatorAttribute);
    public void visit(DesignatorSelect DesignatorSelect);
    public void visit(DesignatorIdent DesignatorIdent);
    public void visit(DesignatorUnion DesignatorUnion);
    public void visit(DesignatorDec DesignatorDec);
    public void visit(DesignatorInc DesignatorInc);
    public void visit(FunctionCall FunctionCall);
    public void visit(DesignatorAssign DesignatorAssign);
    public void visit(StatementListMatched StatementListMatched);
    public void visit(DoWhileWithCondNStmt DoWhileWithCondNStmt);
    public void visit(DoWhileWithCond DoWhileWithCond);
    public void visit(DoWhile DoWhile);
    public void visit(If If);
    public void visit(Break Break);
    public void visit(Continue Continue);
    public void visit(Read Read);
    public void visit(Return Return);
    public void visit(ReturnWithExpr ReturnWithExpr);
    public void visit(PrintWithComma PrintWithComma);
    public void visit(Print Print);
    public void visit(DesignatorStatementMatched DesignatorStatementMatched);
    public void visit(UnmatchedDerived2 UnmatchedDerived2);
    public void visit(UnmatchedDerived1 UnmatchedDerived1);
    public void visit(StatementDerived2 StatementDerived2);
    public void visit(StatementDerived1 StatementDerived1);
    public void visit(StatementListDerived2 StatementListDerived2);
    public void visit(StatementListDerived1 StatementListDerived1);
    public void visit(LocalVarDerived1 LocalVarDerived1);
    public void visit(LocalVarsDerived2 LocalVarsDerived2);
    public void visit(LocalVarsDerived1 LocalVarsDerived1);
    public void visit(MethodDeclaration MethodDeclaration);
    public void visit(NoMethodDeclarations NoMethodDeclarations);
    public void visit(MethodDeclarations MethodDeclarations);
    public void visit(CharLiteral CharLiteral);
    public void visit(BoolLiteral BoolLiteral);
    public void visit(IntLiteral IntLiteral);
    public void visit(MultipleVarDeclVector MultipleVarDeclVector);
    public void visit(MultipleVarDecl MultipleVarDecl);
    public void visit(SingleVarDeclVector SingleVarDeclVector);
    public void visit(SingleVarDecl SingleVarDecl);
    public void visit(Type Type);
    public void visit(Name Name);
    public void visit(Const Const);
    public void visit(MultipleConstDecl MultipleConstDecl);
    public void visit(SingleConstDecl SingleConstDecl);
    public void visit(GlobalVarDecl GlobalVarDecl);
    public void visit(ConstDecl ConstDecl);
    public void visit(EmptyDeclList EmptyDeclList);
    public void visit(NonEmptyDeclList NonEmptyDeclList);
    public void visit(ProgramName ProgramName);
    public void visit(Program Program);

}
